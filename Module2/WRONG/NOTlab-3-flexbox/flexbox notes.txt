*safe and unsafe values -- might need to know, but not for this lab

	+ browser support lmao get a real browser ???




    The main idea behind the flex layout is to give the container the ability to 
        alter its itemsâ€™ width/height (and order) to best fill the available space 
        (mostly to accommodate to all kind of display devices and screen sizes). 
        A flex container expands items to fill available free space or shrinks them to 
        prevent overflow.

        Flexbox layout is most appropriate to the components of an application, and small-scale 
        layouts, while the Grid layout is intended for larger scale layouts.


    *flexbox = module --> 'display: flex;' = property 



- FLEX CONTAINER 

    - flex item: elements constrained by display: flex; 

    - main axis (horizontal) + cross axis (vertical)

    - main size (x-value) + cross size (y-value)

        - main size = width & cross size = height when LTR 

    - main start + end | cross start + end: used for alignment  (start-end)

        *it's not like a grid because there's no 'start and a half'; the positions are absolute

    


|   F L E X B O X   P R O P E R T I E S   | 





- JUSTIFY-CONTENT PROPERTY: 3.1, 4.1, 4.2, 7.2, 7.3 

	- defines alignment along MAIN AXIS or x-axis of flex container
 
		see: https://css-tricks.com/wp-content/uploads/2018/11/00-basic-terminology.svg

	- controls negative space b/t flex items & think text align but with shapes

	- values: flex-start + flex-end, start + end, left + right, center, 

		space-between + space-around + space-evenly 


- ALIGN-ITEMS PROPERTY: not listed in lab notes 

	- defines alignment along CROSS AXIS or y-axis of flex container 

	- text align w/ shapes, but vertically 

	- values: flex-start + flex-end, center, stretch, baseline 

		- baseline --> aligns by content/text margins rather than element shapes 


- FLEX-WRAP PROPERTY: 5.?, 5.3 

	- directs the (over)flow of flex items when their boundaries exceed the borders of the flex container

		- indenting or starting a new line because space 

	- values: nowrap (default), wrap, wrap-reverse



	5.3 -- FLEX-BASIS

	- defines default size of an element before the remaining space is distributed 

		- value can be set as a length or a keyword 

	- values: 0 / auto, content, max-content, min-content, fit-content 

		- remaining space surrounding flex-items w/in flex-container is distributed based on the size of the flex-items 

			- see: https://www.w3.org/TR/css-flexbox-1/images/rel-vs-abs-flex.svg


- FLEX-DIRECTION PROPERTY: 6.? 

	- establishes the main-axis / direction flex items are placed in flex-container 

		- --> items are laid out in horizontal rows or vertical columns 

	- values: row (default) - LTR | RTL, row-reverse - LTR | RTL, column: TTB, column-reverse: BTT


- FLEX-FLOW 

    - default value = row nowrap

    
- ALIGN-CONTENT 

    - aligns content within a flex container and adjusts negative space 

    - values: normal (default), flex-start+end, center, stretch, space-between, space-around 


- GAP, ROW-GAP, COLUMN-GAP 

    - explicitly controls the space between flex items 

        - establishes the minimum amount of space between items 



----------> P R O P E R T I E S     F O R   I T E M S 

*these properties adjust values of items contained w/in flex container 

- ORDER 

    - allows you to rearrange or reorganize the order in which items appear w/in flex container 


- FLEX-GROW 

    - this value controls the distribution of leftover space within the flex container 

        - an item w/ flex-grow: 2 will take up 2x space as item w/ flex-grow: 1 


-FLEX-SHRINK 

    - allows an item to shrink and at what rate? size? numeric value 


-FLEX-BASIS 

    - defines the default size of an element before empty space is distributed 

    - 0 = extra space around item is not factored in to property value 

    - auto = space distribution is based on flex-grow-value 


- FLEX 

    - shorthand for flex-grow, flex-shrink, and flex-basis combined 

    - default is 0 1 auto -- grow, shrink, basis 

        *I don't like this because three values are tied to one number. 
        Like the example says, flex: 5 would be 5 - 1 - 0%
        but there's no way you can extrapolate what flex: 3 would be (or what the other values would be)
        would they just be their default values? 
        then why have them all tied together in the first place, if the only thing you are really changing
            is the first value (flex-grow)?? 

            as a further explanantion -- what if I wanted the values to be 3 - 0 - 10% 
            what 'flex: value' number would I put for that?? 

            also, how are you supposed to know what the second and third values will be???


- ALIGN-SELF 

    - allows individual items to override their default flex alignment 

    - values: stretch, flex-start/start/self-start, flex-end/end/self-end, center, and baseline



------------ copied from directions ------------------------------------

flexbox container:
  display: flex | inline-flex;
  flex-direction: row | row-reverse | column | column-reverse;
  flex-wrap: nowrap | wrap | wrap-reverse;
  justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly;
  align-items: stretch | flex-start | flex-end | center | baseline;
  align-content: flex-start | flex-end | center | space-between | space-around | space-evenly | stretch;
  flex-flow: <'flex-direction'> <'flex-wrap'>; // shorthand property


flexbox items:
  flex-grow: <number>;
  flex-shrink: <number>;
  flex-basis: auto | <width>;
  order: <number>;
  align-self: auto | flex-start | flex-end | center | baseline | stretch;
  flex: none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]; // shorthand property 


		

