const express = require('express');
const mysql = require('mysql2');
const cors = require('cors');
require('dotenv').config();

// use for debugging 

const fs = require('fs');
const logStream = fs.createWriteStream('server.log', { flags: 'a' });

console.log = (...args) => {
  logStream.write(`[LOG] ${args.join(' ')}\n`);
  process.stdout.write(args.join(' ') + '\n');
};

console.error = (...args) => {
  logStream.write(`[ERROR] ${args.join(' ')}\n`);
  process.stderr.write(args.join(' ') + '\n');
};



//const bcrypt = require("bcrypt");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const app = express();
app.use(cors());
app.use(express.json());

const db = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
});

db.connect(err => {
  if (err) {
    console.error('Database connection failed:', err);
    return;
  }
  console.log('Connected to MySQL database.');
});





app.get('/api/data', (req, res) => {
  db.query('SELECT * FROM your_table', (err, results) => {
    if (err) return res.status(500).send(err);
    res.json(results);
  });
});

// SIGNUP

//OLD
// app.post("/api/signup", async (req, res) => {
//   const { email, password } = req.body;

//   try {
//     // Check if user exists
//     db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
//       if (err) return res.status(500).json({ message: "Database error", error: err });

//       if (results.length > 0) {
//         return res.status(400).json({ message: "Email already in use" });
//       }

//       // Hash the password
//       const hashedPassword = await bcrypt.hash(password, 10);

//       // Insert new user
//       db.query(
//         "INSERT INTO users (email, password) VALUES (?, ?)",
//         [email, hashedPassword],
//         (err, result) => {
//           if (err) return res.status(500).json({ message: "Insert error", error: err });

//           // Generate token
//           const token = jwt.sign({ id: result.insertId, email }, process.env.JWT_SECRET, {
//             expiresIn: "1h",
//           });

//           res.status(201).json({ message: "User created", token });
//         }
//       );
//     });
//   } catch (err) {
//     res.status(500).json({ message: "Server error", error: err.message });
//   }
// });

app.post("/api/signup", async (req, res) => {
  const { firstName, lastName, email, password } = req.body;
  const username = `${firstName} ${lastName}`;

  try {
    // Check for existing email
    db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
      if (err) return res.status(500).json({ message: "Database error", error: err });

      if (results.length > 0) {
        return res.status(409).json({ success: false, message: "Email already in use" });
      }

      const hashedPassword = await bcrypt.hash(password, 10);

      // Insert new user
      db.query(
        "INSERT INTO users (username, email, password) VALUES (?, ?, ?)",
        [username, email, hashedPassword],
        (err, result) => {
          if (err) return res.status(500).json({ message: "Insert error", error: err });

          const newUser = { id: result.insertId, username, email };

          const token = jwt.sign(
            { id: newUser.id, email: newUser.email },
            process.env.JWT_SECRET,
            { expiresIn: "1h" }
          );

          res.json({ success: true, user: newUser, token });
        }
      );
    });
  } catch (err) {
    console.error("signup error", err);
    res.status(500).json({ message: "Server error", error: err.message });
  }
});


// LOGIN

// OLD
// app.post("/api/login", (req, res) => {
//   const { email, password } = req.body;

//   db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
//     if (err) return res.status(500).json({ message: "Database error", error: err });

//     if (results.length === 0) {
//       return res.status(401).json({ message: "Invalid email or password" });
//     }

//     const user = results[0];
//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) {
//       return res.status(401).json({ message: "Invalid email or password" });
//     }

//     res.json({
//       success: true,
//       user: {
//       id: user.id,
//       username: user.username,
//       email: user.email
//       }
//     });


//     const token = jwt.sign({ id: user.id, email: user.email }, process.env.JWT_SECRET, {
//       expiresIn: "1h",
//     });

//     res.json({ message: "Login successful", token });
//   });
// });

app.post("/api/login", (req, res) => {
  const { email, password } = req.body;

  db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
    if (err) {
      return res.status(500).json({ message: "Database error", error: err });
    }

    if (results.length === 0) {
      return res.status(401).json({ success: false, message: "Invalid email or password" });
    }

    const user = results[0];
    const isMatch = await bcrypt.compare(password, user.password);

    if (!isMatch) {
      return res.status(401).json({ success: false, message: "Invalid email or password" });
    }

    // Generate JWT token
    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    // Send back safe user data and the token
    res.json({
      success: true,
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
      },
      token,
    });
  });
});


app.get('/', (req, res) => {
  res.send('Server is running. Use POST /api/signup to register.');
});


// const PORT = process.env.PORT || 5000;
// app.listen(PORT, () => {
//   console.log(`Server running on port ${PORT}`);
// });

const authRoutes = require('./routes/auth');
app.use('/api', authRoutes);


app.listen(5000, ()=> {

  console.log("Server running on port 5000");

});